Archived Items

1.     Rosetta spell checker.
2.     Create a user's configuration database. Store key types too.
3.     Create a commanding language. The language could be used to
       navigate private Spot-On nodes remotely. Glitch!
4.     Zero-knowledge passphrase authentication.
5.     Allow for other ciphers besides AES for e-mail Gold Bugs.
6.     Per-participant permissions.
7.     Account credentials should not be recorded via reversible encryption.
       Derive keys? Assume an upper bound during account discovery.
8.     Database entries containing hashes can be maliciously twisted. Encrypt?
9.     Rosetta: Inbox, Drafts (?), Sent, Trash.
10.    Colorful HTTP headers. Custom protocol messages for rapid redeployment.
11.    Remote kernel termination.
12.    E-mail GPG.
13.    Which key types to export and import? A new selection dialog.
14.    There is some redundant deciphering of data: findMessageType()
       followed by process() routines.
15.    Multiple proxies.
16.    Open Library.
17.    IMAP and optional removal of messages; retrieve latest.
18.    Optional GCRYPT. Android and OpenSSL.
19.    Single Rosetta attachments.

Completed Items

1.     Inform the kernel of the key.
2.     Add colors to the kernel widgets. On Windows platforms,
       the kernel path must represent a readable program. On other platforms,
       the path must represent an executable program.
3.     If the passphrase is not set, disable all other tabs. Also
       disable the kernel and listeners group boxes.
4.     Sticky needs a tooltip describing the feature.
5.     Add a check box to hide all disconnected neighbors. This was
       completed, however, it was removed on 06/03/2013. The option
       may cause confusion when a new neighbor is defined if a uniqueness
       error arises. Similar confusion may arise for listeners.
6.     Improve the IP input masks. Removed the underscores so that the
       space bar may be used. Attached returnPressed() signals to
       listener and neighbor IP widgets.
7.     When the RSA key generation is finished, a confirmation should
       be displayed.
8.     The context menu to share the public key should be a button.
9.     Add an icon to a connected neighbor.
10.    libspoton.dll needs to be installed in the executable's path.
11.    Add presence information to the Participants table.
12.    Provide a means of sending a message to friends only.
13.    Add UUIDs to neighbors.
14.    Display additional information pertaining to network information in
       the Neighbors table.
15.    Re-encode various databases whenever the passphrase is changed.
16.    Offline e-mail.
17.    Qt 4.6.3 support. Please ignore. Qt 4.6.x and older are not
       supported.
18.    Use QSslSockets.
19.    Inspect toInt() results.
20.    Encrypt the uuid field in the neighbors.db database.
21.    Encrypt-then-MAC.
       (http://cseweb.ucsd.edu/~mihir/papers/oem.html)
22.    Some messages are echoed. The transfer method (get, post) of the
       original message should be respected.
23.    Inspect spoton_crypt's hash failures.
24.    Secure connections between the interfaces and the kernel.
25.    Dedicated lines. Such lines, if enabled by both parties, do
       not allow echoed data.
26.    The re-encoding phase may produce errors. Delete corrupt entries.
27.    All database names should be unique.
28.    Depict listeners that support SSL.
29.    Echo mode for listeners.
30.    Reset keep-alive timers if valid data has been processed.
31.    The kernel should behave as a pass-through device if
       participants are not defined. However, it should emit
       scrambled messages if necessary.
32.    Improve kernel congestion cache.
33.    Complete max. Neighbors fields.
34.    Do not destroy the children of an inactive listener. Provide a context
       menu action instead.
35.    Do not store SSL keys in listeners.db and neighbors.db.
36.    The number of connections in the Listeners table may be incorrect.
37.    Full/half-echo listeners context menu option. Children neighbors
       remain as configured.
38.    TTLs may be used to describe Spot-On graphs. Alternative?
39.    A Spot-On node may create a non-specific message having a high TTL
       with the scope of exploring graphs. The insight would be broken
       by nodes having congestion controls. TTLs need to be reviewed.
40.    Review SQL update statements.
41.    Function to separate children from listeners.
42.    Limit sending of information to the kernel. See
       spoton::slotKernelSocketState().
43.    Simplify messages. Hide header information.
44.    Local and long distance calling feature to limit PKI.
45.    Add optional signatures for inbound and outbound traffic.
46.    Bulk key copies, per the friendly Mr. Smith.
47.    Provide IP blocking capabilities.
48.    Include external IP addresses in listener certificates.
49.    Review process signals for the kernel.
50.    E-mail retrieval may fail if a node is disconnected because of
       a lifetime expiration. Other communications may fail too.
51.    Permanent certificates.
52.    Statistics.
53.    Introduce DSA and ElGamal.
54.    SQL injection.
55.    Record sent data as it may be returned via an echo.
56.    Correct implementation of the Encrypt-then-MAC usage. One key
       should be used for encryption and a separate key for generating
       the MAC.
57.    Favorite channels.
58.    Remove UTF-8 conversions in spoton_crypt::saltedPassphraseHash().
59.    Use separate hash keys with geminis.
60.    Inspect UTF-8 uses.
61.    Rewind support for transmitted mosaics.
62.    Integer overflows!
63.    Create a Tools menu. Provide mechanisms for decrypting and encrypting
       data that's been transmitted via non-Spot. That is, a feature
       to copy encrypted content and send it via other applications.
64.    Separate keys should be used for storing keyed hashes.
65.    Prevent replay attacks of authenticated sessions.
66.    Artificial impersonators.
67.    Add url logic to spoton::addFriendsKey().
68.    Provide a means of exporting and importing keys.
69.    Inbound data should be time-tagged. Nodes must purge
       containers of old data. Otherwise, one could be inundated with
       seemingly-qualified data. Nasty!
70.    SCTP.
71.    Feature to discover missing pulses.
72.    Store MACs of encrypted data along with the encrypted data.
73.    There may be an issue with the validity of stored e-mail. That is,
       retrieving e-mail from another node may retrieve compromised content.
       Inspect it!
74.    Encrypt public keys of other participants.
75.    Semi-anonymous post office boxes. Please see Institutions.
76.    Message of the day (motd).
77.    Store the id field in idiotes.db in a secure manner.
78.    Encrypt participants public keys. Keyed hashes using the public
       key as the key? Slow retrieval.
79.    Echo star systems.
80.    Adaptive Echo. See also Echo Star Systems. Configured Spot nodes
       will direct traffic based on secret tokens.
81.    Limit client connections by IP address.
82.    Purge items from post_office if their dates are invalid.
83.    Perform calling over geminis.
84.    Accounts and allowed IP addresses suffer selection issues.
85.    NTRU support.
86.    Support ECC, or not. Signatures supported.
87.    IMAP and POP3.
88.    Optional OTR because it's so pretty. Partial SMP.
89.    Provide GCM mode. libgcrypt 1.6.x is required. Authentication data
       is not included.
90.    Use super-secure memory? Used here and there.
91.    Include licenses of other software where applicable.
       Satisfy the license soldiers.
92.    Entering geminis is difficult.
93.    Notify user of potential replays.
94.    Prioritize keep-alive messages. Not required.
95.    Novas should have separate hash keys.
96     Do something about whitespace. There are many input paths that
       ought to be considered.
97.    E-mail institutions require dispatcher signatures.
98.    GoldBug keys should have separate hash keys.
99.    The kernel is susceptible to flooding as the newline character
       is mandatory.
100.   macdeployqt and Qt 5 do not produce correct bundles on MacOS.
101.   Allow programs such as netcat to feed data to Spot-On. Specific
       private listeners would be capable of transforming the data
       into StarBeam pulses.
102.   Allow pass-through flow of non-Spot-On data.
103.   Customize expiration timers.
104.   Display information pertaining to unsigned documents.
105.   Signal handlers and safe functions. Some Windows-specific
       functions remain.
106.   Is it possible for automatic digests to be computed on StarBeams before
       the files are completed? Disable buffering and issue fsync() on
       Unix systems.
107.   Multiple Poptastic attachments.
108.   The method spoton_neighbor::savePublicKey() does not compare
       personal keys with provided keys.
109.   UDP multicast servers are not necessary.
110.   Prevent inserts of own keys in friends_public_keys.db.
111.   Keys are re-used in directory-mode file encryption. Single-pulse
       key derivation.
112.   PostgreSQL query cancellation in the kernel.
       (SET SESSION statement_timeout TO milliseconds)
113.   Active-kernel reminder warning persists.
114.   Doxygen.
115.   Include timestamps in Buzz.
116.   Include timestamps in StarBeam pulses.
117.   Include timestamps in EPKS.
118.   Include timestamps in URL bundles.
119.   Verify that the Super Echo precedes computations.
120.   spoton_misc::importUrl() and lastInsertId() over the sequence.
       Delete previous values on successful retrieval of sequence.
121.   Smoke's Fire requires CTS. Modify Buzz.
122.   Buzz Cryptographic Discovery.
123.   SO_TIMESTAMPING socket option, if available.
124.   Monitor kernel health from the UI.
125.   Enable SQLite foreign key support via PRAGMA foreign_keys = ON.
       Where possible.
126.   Hard kernel termination. Control session separation.
127.   What to do about corrupt database values? Visuals ("error")
       as well as intelligent logic.
128.   The Poptastic pixmap does not respect a scaled-contents request.
129.   Automatic computations of rapid StarBeam digests may be incorrect.
       See spoton::slotPopulateStars().
130.   DTLS.
131.   Format changes (order members).
132.   Per request, provide an automatic StarBeam rewind mechanism with a
       timer. Private and public libraries. Not required as StarBeams are
       now reliable.
133.   Remove Q_UNUSED.
134.   Copying the Rosetta key does not include the Rosetta name.
135.   Repopulate separated e-mail windows after a new participant is added.
136.   Repopulate separated e-mail windows after participant removal.
137.   Repopulate SMP Window after participant removal.
138.   Re-encode SHA3-512 starbeam.db fields.
139.   Highlight StarBeam SHA3-512 file digest.
140.   Index the PostgreSQL tables. Automatically created.
141.   Scramblers are too periodic. Stable interval.
142.   gcry_md_setkey() does not impose minimum key lengths.
       For use with the HMAC feature or BLAKE2 keyed hash, set the MAC
       key to the value of key of length keylen bytes. For HMAC, there is
       no restriction on the length of the key. For keyed BLAKE2b hash,
       length of the key must be 64 bytes or less. For keyed BLAKE2s hash,
       length of the key must be 32 bytes or less.)
143.   Python Web interface for the Search machine. Simple Web server.
144.   Retrieve SOSS results from Spot-On.
145.   Web server credentials may differ from PQ Search credentials.
146.   Improve RSS importing (locked database).
147.   The data stored in shared.db is not authenticated. Uniqueness
       is not properly defined. Dooble integration separated.
148.   Allow selection of Web link in URLs.
149.   URLs statistics.
150.   Compare random credentials with previously-established credentials.
       Should two-way calling verify that credentials are distinct? No.
151.   Allow custom addresses for spoton_external_address.
152.   Limit the congestion database size via the max_page_count pragma.
153.   Clean sensitive memory, if possible.
154.   Retrieve only the latest e-mails from IMAP/POP3. Retrieval of IMAP
       messages is now performed as follows: issue an examination of the
       inbox, determine the exists and uidnext values,
       retrieve the (uidnext - 1) message if exists is greater than zero.
       This will download only the latest messages.
       (http://www.faqs.org/rfcs/rfc3501.html)
       As for POP3, messages are popped.
155.   Key pools via SMP.
156.   Auto-clear textedit widgets that contain too much data.
157.   Temporary containers. Will avoid dropped packets.
158.   WebSockets.
159.   If possible, bundle all Web server resources into the binary.
160.   EPKS: share group (category) and individual (community). Not necessary.
       Provide guidance through text.
161.   DTLS cookies.
162.   Allow user to bookmark search results. Also allow searching of
       bookmarked entries. Perhaps provide a means of searching the
       global databases as well as bookmarked entries. Browser bookmarks.
163.   List addressee in Chat.
164.   Bind the recipient's identity into all hybrid encryption schemes.
       E-mail remains.
165.   McEliece on PowerPC and Qt 5.
166.   Sort numeric table columns housing formatted text.
167.   Dropped packets statistics.
168.   Prevent sharing of private keys in forward-secrecy protocol.
       (Similar to permanent keys.) PKI keys reside in memory.
169.   Forward Secrecy ephemeral keys expiry times.
170.   StarBeam ETA.
171.   Independent StarBeam writers. Would exhaust the kernel.
172.   Remove Qt 4.x support.
173.   Project file housekeeping.
174.   Kernel RSS.
175.   Random sequences for random data
       (http://www.fq.math.ca/Scanned/23-2/dawson.pdf).
       Other devices, nodes, etc.
176.   Display default Spot-On page on failed URLs.
177.   Beautiful combination boxes.
178.   Proxies. Delegated to Spot-On-Lite.
179.   Limit the number of SOSS clients.
180.   Remove obsolete includes.
181.   Distorted text in previews. Varies with system.
182.   Minimum contents lengths for combination boxes.
183.   Decrypt / encrypt panels in Rosetta.
184.   Retain Rosetta size and splitter states.
185.   Include source name in Rosetta messages.
186.   Paste buttons in Rosetta panels.
187.   Allow removal of personal GPG keys.
188.   New Rosetta keys database tables (participants, personal).
189.   Allow removal of GPG keys.
190.   Display destination types (GPG dump).
191.   Include GPGME version information.
192.   Delete GPG keys from local keyring.
193.   Copy Rosetta plaintext.
194.   GPG passphrase.
195.   Re-encode GPG keys.
196.   E-mail pagination.
197.   Manual retrieval of Poptastic. Cancel automatic.
198.   Remove libspoton from project files.
199.   Provide a total silent mode.
200.   libgcrypt from https://repo.msys2.org/mingw/i686/.
201.   GPG key rings allow for multiple private keys.
202.   Document server-less P2P.
203.   GB window icon is incorrect in Windows. Incorrect UI files.
204.   Qt 6.2 LTS!
205.   OpenSSL 3. New functions only.
206.   QComboBox's currentIndexChanged(const QString &) is obsolete.
207.   QFSFileEngine::open: No file name specified: created from
       e-mail. Missing images?
208.   Include dates of documents in Web presentation.
209.   Human proxies. Single-proxy completion.
210.   Improve Web search query performance. Replaced UNION with UNION ALL.
       The URL database tables contain unique sets.
211.   Set the cursor position to 0 after setText().
212.   Close button is not visible on Buzz tab on MacOS. New Close widget.
213.   Splash screen.
214.   NTL warnings on FreeBSD.
215.   Qt 6.2 LTS and QSqlQuery bind-value warnings.
216.   Hybrid group communications based on deterministic key pairs. Buzz
       credentials may be generated from common text.
217.   Windows x86-64.
218.   SQLite silent mode; limit synchronization. Mechanical drives are
       being replaced with solid-state devices.
219.   Purge expired RSS links in the kernel. Be careful of competing
       tasks. New RSS tool tip.
220.   Correct effervescent tool tips. StarBeam.
221.   QString::split() and empty parts.

Remaining Items

1.     Dark mode for Windows.
2.     Replace OpenSSL with executable. Create and remove local files
       via the openssl executable. Library becoming stale.
3.     Automatics and constants:
       Common
       GUI
       Kernel (Completed)
